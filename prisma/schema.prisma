generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  personId  Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  person    Person?  @relation(fields: [personId], references: [id])

  @@map("user")
}

model Person {
  id             Int             @id @default(autoincrement())
  fullName       String
  position       String?
  category       PersonCategory
  phoneNumber    String?
  address        String?
  email          String?
  photo          String?
  startDate      DateTime?
  endDate        DateTime?
  status         PersonStatus    @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectMembers ProjectMember[]
  reports        ReportProject[]
  user           User?

  @@map("person")
}

model Project {
  id             Int             @id @default(autoincrement())
  title          String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  status         ProjectStatus   @default(ONGOING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  companyId      Int
  company        Company         @relation(fields: [companyId], references: [id])
  projectMembers ProjectMember[]
  reports        ReportProject[]

  @@map("project")
}

model ProjectMember {
  id         Int      @id @default(autoincrement())
  personId   Int
  projectId  Int
  assignedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  person     Person   @relation(fields: [personId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, personId], name: "projectId_personId")
  @@map("project_member")
}

model ReportProject {
  id           Int            @id @default(autoincrement())
  projectId    Int
  personId     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  reportDate   DateTime?
  emailStatus  EmailStatus    @default(PENDING)
  isDraft      Boolean        @default(false)
  ReportDetail ReportDetail[]
  person       Person         @relation(fields: [personId], references: [id])
  project      Project        @relation(fields: [projectId], references: [id])

  @@map("report_project")
}

model ReportDetail {
  id              Int           @id @default(autoincrement())
  workedHour      Int
  description     String
  reportProjectId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reportProject   ReportProject @relation(fields: [reportProjectId], references: [id])

  @@map("report_detail")
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String?
  altEmail1 String?
  altEmail2 String?
  altEmail3 String?
  phone     String?
  location  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]

  @@map("company")
}

model Media {
  id        Int      @id @default(autoincrement())
  refType   String
  refId     Int?
  alt       String?
  filename  String
  url       String
  createdAt DateTime @default(now())

  @@map("media")
}

enum PersonCategory {
  PERMANENT
  FREELANCER
  OUTSOURCE
  INTERN
  PART_TIME
  CONTRACT
}

enum PersonStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  CANCELLED
  PAUSED
}

enum ReportStatus {
  PENDING
  FAILED
  SENDING
}

enum EmailStatus {
  PENDING
  SUCCESS
  FAILED
}
